pipeline {
    agent any

    parameters{
        string(name: 'DOCKER_IMAGE', defaultValue: 'paupajaromondejar/python-discuss', description: 'Docker image name')
        string(name: 'TAG', defaultValue: 'latest', description: 'version name')
        string(name: 'CREDENTIALS', defaultValue: 'pau.dockerhub', description: 'DockerHub credentials')
    }
    

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube_5.0'
                    withSonarQubeEnv(installationName: 'aroldev sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=pau-kubecamp-python -Dsonar.sources=./services/python-discuss -Dsonar.inclusions=**/*.py"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('services/python-discuss'){
                    script {
                    def dockerfile = "Dockerfile"
                    // Construye la imagen de Docker
                    app = docker.build("${params.DOCKER_IMAGE}:${params.TAG}", "-f ${dockerfile}  .")
                    }
                }
                
            }
        }
        stage('Push image') {
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: 'pau.dockerhub', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
                        // assumes Jib is configured to use the environment variables
                        sh "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PWD}"
                        app.push()
                    }
                }
            }
        }
        
    }
}